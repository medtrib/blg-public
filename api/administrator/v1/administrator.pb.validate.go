// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: administrator/v1/administrator.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetAdministratorListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAdministratorListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAdministratorListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAdministratorListReqMultiError, or nil if none found.
func (m *GetAdministratorListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAdministratorListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := GetAdministratorListReqValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() <= 0 {
		err := GetAdministratorListReqValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Username

	// no validation rules for Mobile

	// no validation rules for Nickname

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAdministratorListReqValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAdministratorListReqValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAdministratorListReqValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAtStart

	// no validation rules for CreatedAtEnd

	if len(errors) > 0 {
		return GetAdministratorListReqMultiError(errors)
	}

	return nil
}

// GetAdministratorListReqMultiError is an error wrapping multiple validation
// errors returned by GetAdministratorListReq.ValidateAll() if the designated
// constraints aren't met.
type GetAdministratorListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAdministratorListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAdministratorListReqMultiError) AllErrors() []error { return m }

// GetAdministratorListReqValidationError is the validation error returned by
// GetAdministratorListReq.Validate if the designated constraints aren't met.
type GetAdministratorListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAdministratorListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAdministratorListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAdministratorListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAdministratorListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAdministratorListReqValidationError) ErrorName() string {
	return "GetAdministratorListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetAdministratorListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAdministratorListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAdministratorListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAdministratorListReqValidationError{}

// Validate checks the field values on GetAdministratorListPageRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAdministratorListPageRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAdministratorListPageRes with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAdministratorListPageResMultiError, or nil if none found.
func (m *GetAdministratorListPageRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAdministratorListPageRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAdministratorListPageResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAdministratorListPageResValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAdministratorListPageResValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAdministratorListPageResMultiError(errors)
	}

	return nil
}

// GetAdministratorListPageResMultiError is an error wrapping multiple
// validation errors returned by GetAdministratorListPageRes.ValidateAll() if
// the designated constraints aren't met.
type GetAdministratorListPageResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAdministratorListPageResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAdministratorListPageResMultiError) AllErrors() []error { return m }

// GetAdministratorListPageResValidationError is the validation error returned
// by GetAdministratorListPageRes.Validate if the designated constraints
// aren't met.
type GetAdministratorListPageResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAdministratorListPageResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAdministratorListPageResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAdministratorListPageResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAdministratorListPageResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAdministratorListPageResValidationError) ErrorName() string {
	return "GetAdministratorListPageResValidationError"
}

// Error satisfies the builtin error interface
func (e GetAdministratorListPageResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAdministratorListPageRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAdministratorListPageResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAdministratorListPageResValidationError{}

// Validate checks the field values on Administrator with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Administrator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Administrator with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AdministratorMultiError, or
// nil if none found.
func (m *Administrator) ValidateAll() error {
	return m.validate(true)
}

func (m *Administrator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Mobile

	// no validation rules for Nickname

	// no validation rules for Avatar

	// no validation rules for Status

	// no validation rules for Role

	// no validation rules for LastLoginTime

	// no validation rules for LastLoginIp

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return AdministratorMultiError(errors)
	}

	return nil
}

// AdministratorMultiError is an error wrapping multiple validation errors
// returned by Administrator.ValidateAll() if the designated constraints
// aren't met.
type AdministratorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdministratorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdministratorMultiError) AllErrors() []error { return m }

// AdministratorValidationError is the validation error returned by
// Administrator.Validate if the designated constraints aren't met.
type AdministratorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdministratorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdministratorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdministratorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdministratorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdministratorValidationError) ErrorName() string { return "AdministratorValidationError" }

// Error satisfies the builtin error interface
func (e AdministratorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdministrator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdministratorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdministratorValidationError{}

// Validate checks the field values on CreateAdministratorReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAdministratorReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAdministratorReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAdministratorReqMultiError, or nil if none found.
func (m *CreateAdministratorReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAdministratorReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUsername()); l < 5 || l > 20 {
		err := CreateAdministratorReqValidationError{
			field:  "Username",
			reason: "value length must be between 5 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateAdministratorReq_Username_Pattern.MatchString(m.GetUsername()) {
		err := CreateAdministratorReqValidationError{
			field:  "Username",
			reason: "value does not match regex pattern \"^[a-zA-Z][a-zA-Z0-9_]{5,15}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 6 {
		err := CreateAdministratorReqValidationError{
			field:  "Password",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateAdministratorReq_Mobile_Pattern.MatchString(m.GetMobile()) {
		err := CreateAdministratorReqValidationError{
			field:  "Mobile",
			reason: "value does not match regex pattern \"^1[0-9]{10}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetNickname()); l < 1 || l > 20 {
		err := CreateAdministratorReqValidationError{
			field:  "Nickname",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetAvatar()); l < 1 || l > 255 {
		err := CreateAdministratorReqValidationError{
			field:  "Avatar",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if l := utf8.RuneCountInString(m.GetRole()); l < 1 || l > 255 {
		err := CreateAdministratorReqValidationError{
			field:  "Role",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateAdministratorReqMultiError(errors)
	}

	return nil
}

// CreateAdministratorReqMultiError is an error wrapping multiple validation
// errors returned by CreateAdministratorReq.ValidateAll() if the designated
// constraints aren't met.
type CreateAdministratorReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAdministratorReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAdministratorReqMultiError) AllErrors() []error { return m }

// CreateAdministratorReqValidationError is the validation error returned by
// CreateAdministratorReq.Validate if the designated constraints aren't met.
type CreateAdministratorReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAdministratorReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAdministratorReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAdministratorReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAdministratorReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAdministratorReqValidationError) ErrorName() string {
	return "CreateAdministratorReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAdministratorReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAdministratorReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAdministratorReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAdministratorReqValidationError{}

var _CreateAdministratorReq_Username_Pattern = regexp.MustCompile("^[a-zA-Z][a-zA-Z0-9_]{5,15}$")

var _CreateAdministratorReq_Mobile_Pattern = regexp.MustCompile("^1[0-9]{10}$")

// Validate checks the field values on UpdateAdministratorReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAdministratorReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAdministratorReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAdministratorReqMultiError, or nil if none found.
func (m *UpdateAdministratorReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAdministratorReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := UpdateAdministratorReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUsername()); l < 5 || l > 20 {
		err := UpdateAdministratorReqValidationError{
			field:  "Username",
			reason: "value length must be between 5 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateAdministratorReq_Username_Pattern.MatchString(m.GetUsername()) {
		err := UpdateAdministratorReqValidationError{
			field:  "Username",
			reason: "value does not match regex pattern \"^[a-zA-Z][a-zA-Z0-9_]{3,15}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 6 {
		err := UpdateAdministratorReqValidationError{
			field:  "Password",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UpdateAdministratorReq_Mobile_Pattern.MatchString(m.GetMobile()) {
		err := UpdateAdministratorReqValidationError{
			field:  "Mobile",
			reason: "value does not match regex pattern \"^1[0-9]{10}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetNickname()); l < 1 || l > 20 {
		err := UpdateAdministratorReqValidationError{
			field:  "Nickname",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetAvatar()); l < 1 || l > 255 {
		err := UpdateAdministratorReqValidationError{
			field:  "Avatar",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if l := utf8.RuneCountInString(m.GetRole()); l < 1 || l > 255 {
		err := UpdateAdministratorReqValidationError{
			field:  "Role",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateAdministratorReqMultiError(errors)
	}

	return nil
}

// UpdateAdministratorReqMultiError is an error wrapping multiple validation
// errors returned by UpdateAdministratorReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateAdministratorReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAdministratorReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAdministratorReqMultiError) AllErrors() []error { return m }

// UpdateAdministratorReqValidationError is the validation error returned by
// UpdateAdministratorReq.Validate if the designated constraints aren't met.
type UpdateAdministratorReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAdministratorReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAdministratorReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAdministratorReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAdministratorReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAdministratorReqValidationError) ErrorName() string {
	return "UpdateAdministratorReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAdministratorReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAdministratorReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAdministratorReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAdministratorReqValidationError{}

var _UpdateAdministratorReq_Username_Pattern = regexp.MustCompile("^[a-zA-Z][a-zA-Z0-9_]{3,15}$")

var _UpdateAdministratorReq_Mobile_Pattern = regexp.MustCompile("^1[0-9]{10}$")

// Validate checks the field values on DeleteAdministratorReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAdministratorReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAdministratorReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAdministratorReqMultiError, or nil if none found.
func (m *DeleteAdministratorReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAdministratorReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteAdministratorReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteAdministratorReqMultiError(errors)
	}

	return nil
}

// DeleteAdministratorReqMultiError is an error wrapping multiple validation
// errors returned by DeleteAdministratorReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteAdministratorReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAdministratorReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAdministratorReqMultiError) AllErrors() []error { return m }

// DeleteAdministratorReqValidationError is the validation error returned by
// DeleteAdministratorReq.Validate if the designated constraints aren't met.
type DeleteAdministratorReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAdministratorReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAdministratorReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAdministratorReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAdministratorReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAdministratorReqValidationError) ErrorName() string {
	return "DeleteAdministratorReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAdministratorReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAdministratorReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAdministratorReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAdministratorReqValidationError{}

// Validate checks the field values on RecoverAdministratorReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecoverAdministratorReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecoverAdministratorReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecoverAdministratorReqMultiError, or nil if none found.
func (m *RecoverAdministratorReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RecoverAdministratorReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := RecoverAdministratorReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RecoverAdministratorReqMultiError(errors)
	}

	return nil
}

// RecoverAdministratorReqMultiError is an error wrapping multiple validation
// errors returned by RecoverAdministratorReq.ValidateAll() if the designated
// constraints aren't met.
type RecoverAdministratorReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecoverAdministratorReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecoverAdministratorReqMultiError) AllErrors() []error { return m }

// RecoverAdministratorReqValidationError is the validation error returned by
// RecoverAdministratorReq.Validate if the designated constraints aren't met.
type RecoverAdministratorReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecoverAdministratorReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecoverAdministratorReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecoverAdministratorReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecoverAdministratorReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecoverAdministratorReqValidationError) ErrorName() string {
	return "RecoverAdministratorReqValidationError"
}

// Error satisfies the builtin error interface
func (e RecoverAdministratorReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecoverAdministratorReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecoverAdministratorReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecoverAdministratorReqValidationError{}

// Validate checks the field values on GetAdministratorReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAdministratorReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAdministratorReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAdministratorReqMultiError, or nil if none found.
func (m *GetAdministratorReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAdministratorReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Mobile

	// no validation rules for Role

	if len(errors) > 0 {
		return GetAdministratorReqMultiError(errors)
	}

	return nil
}

// GetAdministratorReqMultiError is an error wrapping multiple validation
// errors returned by GetAdministratorReq.ValidateAll() if the designated
// constraints aren't met.
type GetAdministratorReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAdministratorReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAdministratorReqMultiError) AllErrors() []error { return m }

// GetAdministratorReqValidationError is the validation error returned by
// GetAdministratorReq.Validate if the designated constraints aren't met.
type GetAdministratorReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAdministratorReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAdministratorReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAdministratorReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAdministratorReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAdministratorReqValidationError) ErrorName() string {
	return "GetAdministratorReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetAdministratorReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAdministratorReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAdministratorReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAdministratorReqValidationError{}

// Validate checks the field values on VerifyAdministratorPasswordReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyAdministratorPasswordReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyAdministratorPasswordReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// VerifyAdministratorPasswordReqMultiError, or nil if none found.
func (m *VerifyAdministratorPasswordReq) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyAdministratorPasswordReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := VerifyAdministratorPasswordReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 6 {
		err := VerifyAdministratorPasswordReqValidationError{
			field:  "Password",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return VerifyAdministratorPasswordReqMultiError(errors)
	}

	return nil
}

// VerifyAdministratorPasswordReqMultiError is an error wrapping multiple
// validation errors returned by VerifyAdministratorPasswordReq.ValidateAll()
// if the designated constraints aren't met.
type VerifyAdministratorPasswordReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyAdministratorPasswordReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyAdministratorPasswordReqMultiError) AllErrors() []error { return m }

// VerifyAdministratorPasswordReqValidationError is the validation error
// returned by VerifyAdministratorPasswordReq.Validate if the designated
// constraints aren't met.
type VerifyAdministratorPasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyAdministratorPasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyAdministratorPasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyAdministratorPasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyAdministratorPasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyAdministratorPasswordReqValidationError) ErrorName() string {
	return "VerifyAdministratorPasswordReqValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyAdministratorPasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyAdministratorPasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyAdministratorPasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyAdministratorPasswordReqValidationError{}

// Validate checks the field values on AdministratorStatusChangeReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdministratorStatusChangeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdministratorStatusChangeReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdministratorStatusChangeReqMultiError, or nil if none found.
func (m *AdministratorStatusChangeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AdministratorStatusChangeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := AdministratorStatusChangeReqValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return AdministratorStatusChangeReqMultiError(errors)
	}

	return nil
}

// AdministratorStatusChangeReqMultiError is an error wrapping multiple
// validation errors returned by AdministratorStatusChangeReq.ValidateAll() if
// the designated constraints aren't met.
type AdministratorStatusChangeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdministratorStatusChangeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdministratorStatusChangeReqMultiError) AllErrors() []error { return m }

// AdministratorStatusChangeReqValidationError is the validation error returned
// by AdministratorStatusChangeReq.Validate if the designated constraints
// aren't met.
type AdministratorStatusChangeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdministratorStatusChangeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdministratorStatusChangeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdministratorStatusChangeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdministratorStatusChangeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdministratorStatusChangeReqValidationError) ErrorName() string {
	return "AdministratorStatusChangeReqValidationError"
}

// Error satisfies the builtin error interface
func (e AdministratorStatusChangeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdministratorStatusChangeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdministratorStatusChangeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdministratorStatusChangeReqValidationError{}

// Validate checks the field values on AdministratorLoginSuccessReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdministratorLoginSuccessReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdministratorLoginSuccessReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AdministratorLoginSuccessReqMultiError, or nil if none found.
func (m *AdministratorLoginSuccessReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AdministratorLoginSuccessReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for LastLoginTime

	// no validation rules for LastLoginIp

	if len(errors) > 0 {
		return AdministratorLoginSuccessReqMultiError(errors)
	}

	return nil
}

// AdministratorLoginSuccessReqMultiError is an error wrapping multiple
// validation errors returned by AdministratorLoginSuccessReq.ValidateAll() if
// the designated constraints aren't met.
type AdministratorLoginSuccessReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdministratorLoginSuccessReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdministratorLoginSuccessReqMultiError) AllErrors() []error { return m }

// AdministratorLoginSuccessReqValidationError is the validation error returned
// by AdministratorLoginSuccessReq.Validate if the designated constraints
// aren't met.
type AdministratorLoginSuccessReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdministratorLoginSuccessReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdministratorLoginSuccessReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdministratorLoginSuccessReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdministratorLoginSuccessReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdministratorLoginSuccessReqValidationError) ErrorName() string {
	return "AdministratorLoginSuccessReqValidationError"
}

// Error satisfies the builtin error interface
func (e AdministratorLoginSuccessReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdministratorLoginSuccessReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdministratorLoginSuccessReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdministratorLoginSuccessReqValidationError{}
