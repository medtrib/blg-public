// Code generated by entproto. DO NOT EDIT.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: administrator/v1/administrator.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdministratorService_GetAdministratorList_FullMethodName        = "/administrator.v1.AdministratorService/GetAdministratorList"
	AdministratorService_CreateAdministrator_FullMethodName         = "/administrator.v1.AdministratorService/CreateAdministrator"
	AdministratorService_UpdateAdministrator_FullMethodName         = "/administrator.v1.AdministratorService/UpdateAdministrator"
	AdministratorService_GetAdministrator_FullMethodName            = "/administrator.v1.AdministratorService/GetAdministrator"
	AdministratorService_DeleteAdministrator_FullMethodName         = "/administrator.v1.AdministratorService/DeleteAdministrator"
	AdministratorService_RecoverAdministrator_FullMethodName        = "/administrator.v1.AdministratorService/RecoverAdministrator"
	AdministratorService_VerifyAdministratorPassword_FullMethodName = "/administrator.v1.AdministratorService/VerifyAdministratorPassword"
	AdministratorService_AdministratorStatusChange_FullMethodName   = "/administrator.v1.AdministratorService/AdministratorStatusChange"
	AdministratorService_AdministratorLoginSuccess_FullMethodName   = "/administrator.v1.AdministratorService/AdministratorLoginSuccess"
)

// AdministratorServiceClient is the client API for AdministratorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 管理员服务
type AdministratorServiceClient interface {
	// 列表
	GetAdministratorList(ctx context.Context, in *GetAdministratorListReq, opts ...grpc.CallOption) (*GetAdministratorListPageRes, error)
	// 新增管理员
	CreateAdministrator(ctx context.Context, in *CreateAdministratorReq, opts ...grpc.CallOption) (*Administrator, error)
	// 更新管理员
	UpdateAdministrator(ctx context.Context, in *UpdateAdministratorReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 管理员详情
	GetAdministrator(ctx context.Context, in *GetAdministratorReq, opts ...grpc.CallOption) (*Administrator, error)
	// 删除管理员
	DeleteAdministrator(ctx context.Context, in *DeleteAdministratorReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 恢复管理员
	RecoverAdministrator(ctx context.Context, in *RecoverAdministratorReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 验证管理员密码
	VerifyAdministratorPassword(ctx context.Context, in *VerifyAdministratorPasswordReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 更改管理员状态
	AdministratorStatusChange(ctx context.Context, in *AdministratorStatusChangeReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AdministratorLoginSuccess(ctx context.Context, in *AdministratorLoginSuccessReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type administratorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdministratorServiceClient(cc grpc.ClientConnInterface) AdministratorServiceClient {
	return &administratorServiceClient{cc}
}

func (c *administratorServiceClient) GetAdministratorList(ctx context.Context, in *GetAdministratorListReq, opts ...grpc.CallOption) (*GetAdministratorListPageRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAdministratorListPageRes)
	err := c.cc.Invoke(ctx, AdministratorService_GetAdministratorList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administratorServiceClient) CreateAdministrator(ctx context.Context, in *CreateAdministratorReq, opts ...grpc.CallOption) (*Administrator, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Administrator)
	err := c.cc.Invoke(ctx, AdministratorService_CreateAdministrator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administratorServiceClient) UpdateAdministrator(ctx context.Context, in *UpdateAdministratorReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AdministratorService_UpdateAdministrator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administratorServiceClient) GetAdministrator(ctx context.Context, in *GetAdministratorReq, opts ...grpc.CallOption) (*Administrator, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Administrator)
	err := c.cc.Invoke(ctx, AdministratorService_GetAdministrator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administratorServiceClient) DeleteAdministrator(ctx context.Context, in *DeleteAdministratorReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AdministratorService_DeleteAdministrator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administratorServiceClient) RecoverAdministrator(ctx context.Context, in *RecoverAdministratorReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AdministratorService_RecoverAdministrator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administratorServiceClient) VerifyAdministratorPassword(ctx context.Context, in *VerifyAdministratorPasswordReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AdministratorService_VerifyAdministratorPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administratorServiceClient) AdministratorStatusChange(ctx context.Context, in *AdministratorStatusChangeReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AdministratorService_AdministratorStatusChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *administratorServiceClient) AdministratorLoginSuccess(ctx context.Context, in *AdministratorLoginSuccessReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AdministratorService_AdministratorLoginSuccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdministratorServiceServer is the server API for AdministratorService service.
// All implementations must embed UnimplementedAdministratorServiceServer
// for forward compatibility.
//
// 管理员服务
type AdministratorServiceServer interface {
	// 列表
	GetAdministratorList(context.Context, *GetAdministratorListReq) (*GetAdministratorListPageRes, error)
	// 新增管理员
	CreateAdministrator(context.Context, *CreateAdministratorReq) (*Administrator, error)
	// 更新管理员
	UpdateAdministrator(context.Context, *UpdateAdministratorReq) (*emptypb.Empty, error)
	// 管理员详情
	GetAdministrator(context.Context, *GetAdministratorReq) (*Administrator, error)
	// 删除管理员
	DeleteAdministrator(context.Context, *DeleteAdministratorReq) (*emptypb.Empty, error)
	// 恢复管理员
	RecoverAdministrator(context.Context, *RecoverAdministratorReq) (*emptypb.Empty, error)
	// 验证管理员密码
	VerifyAdministratorPassword(context.Context, *VerifyAdministratorPasswordReq) (*emptypb.Empty, error)
	// 更改管理员状态
	AdministratorStatusChange(context.Context, *AdministratorStatusChangeReq) (*emptypb.Empty, error)
	AdministratorLoginSuccess(context.Context, *AdministratorLoginSuccessReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedAdministratorServiceServer()
}

// UnimplementedAdministratorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdministratorServiceServer struct{}

func (UnimplementedAdministratorServiceServer) GetAdministratorList(context.Context, *GetAdministratorListReq) (*GetAdministratorListPageRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdministratorList not implemented")
}
func (UnimplementedAdministratorServiceServer) CreateAdministrator(context.Context, *CreateAdministratorReq) (*Administrator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdministrator not implemented")
}
func (UnimplementedAdministratorServiceServer) UpdateAdministrator(context.Context, *UpdateAdministratorReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdministrator not implemented")
}
func (UnimplementedAdministratorServiceServer) GetAdministrator(context.Context, *GetAdministratorReq) (*Administrator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdministrator not implemented")
}
func (UnimplementedAdministratorServiceServer) DeleteAdministrator(context.Context, *DeleteAdministratorReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAdministrator not implemented")
}
func (UnimplementedAdministratorServiceServer) RecoverAdministrator(context.Context, *RecoverAdministratorReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverAdministrator not implemented")
}
func (UnimplementedAdministratorServiceServer) VerifyAdministratorPassword(context.Context, *VerifyAdministratorPasswordReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAdministratorPassword not implemented")
}
func (UnimplementedAdministratorServiceServer) AdministratorStatusChange(context.Context, *AdministratorStatusChangeReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdministratorStatusChange not implemented")
}
func (UnimplementedAdministratorServiceServer) AdministratorLoginSuccess(context.Context, *AdministratorLoginSuccessReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdministratorLoginSuccess not implemented")
}
func (UnimplementedAdministratorServiceServer) mustEmbedUnimplementedAdministratorServiceServer() {}
func (UnimplementedAdministratorServiceServer) testEmbeddedByValue()                              {}

// UnsafeAdministratorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdministratorServiceServer will
// result in compilation errors.
type UnsafeAdministratorServiceServer interface {
	mustEmbedUnimplementedAdministratorServiceServer()
}

func RegisterAdministratorServiceServer(s grpc.ServiceRegistrar, srv AdministratorServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdministratorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdministratorService_ServiceDesc, srv)
}

func _AdministratorService_GetAdministratorList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdministratorListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorServiceServer).GetAdministratorList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdministratorService_GetAdministratorList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorServiceServer).GetAdministratorList(ctx, req.(*GetAdministratorListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministratorService_CreateAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdministratorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorServiceServer).CreateAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdministratorService_CreateAdministrator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorServiceServer).CreateAdministrator(ctx, req.(*CreateAdministratorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministratorService_UpdateAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdministratorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorServiceServer).UpdateAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdministratorService_UpdateAdministrator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorServiceServer).UpdateAdministrator(ctx, req.(*UpdateAdministratorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministratorService_GetAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdministratorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorServiceServer).GetAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdministratorService_GetAdministrator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorServiceServer).GetAdministrator(ctx, req.(*GetAdministratorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministratorService_DeleteAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdministratorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorServiceServer).DeleteAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdministratorService_DeleteAdministrator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorServiceServer).DeleteAdministrator(ctx, req.(*DeleteAdministratorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministratorService_RecoverAdministrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverAdministratorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorServiceServer).RecoverAdministrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdministratorService_RecoverAdministrator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorServiceServer).RecoverAdministrator(ctx, req.(*RecoverAdministratorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministratorService_VerifyAdministratorPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAdministratorPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorServiceServer).VerifyAdministratorPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdministratorService_VerifyAdministratorPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorServiceServer).VerifyAdministratorPassword(ctx, req.(*VerifyAdministratorPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministratorService_AdministratorStatusChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdministratorStatusChangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorServiceServer).AdministratorStatusChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdministratorService_AdministratorStatusChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorServiceServer).AdministratorStatusChange(ctx, req.(*AdministratorStatusChangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdministratorService_AdministratorLoginSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdministratorLoginSuccessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdministratorServiceServer).AdministratorLoginSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdministratorService_AdministratorLoginSuccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdministratorServiceServer).AdministratorLoginSuccess(ctx, req.(*AdministratorLoginSuccessReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AdministratorService_ServiceDesc is the grpc.ServiceDesc for AdministratorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdministratorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "administrator.v1.AdministratorService",
	HandlerType: (*AdministratorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAdministratorList",
			Handler:    _AdministratorService_GetAdministratorList_Handler,
		},
		{
			MethodName: "CreateAdministrator",
			Handler:    _AdministratorService_CreateAdministrator_Handler,
		},
		{
			MethodName: "UpdateAdministrator",
			Handler:    _AdministratorService_UpdateAdministrator_Handler,
		},
		{
			MethodName: "GetAdministrator",
			Handler:    _AdministratorService_GetAdministrator_Handler,
		},
		{
			MethodName: "DeleteAdministrator",
			Handler:    _AdministratorService_DeleteAdministrator_Handler,
		},
		{
			MethodName: "RecoverAdministrator",
			Handler:    _AdministratorService_RecoverAdministrator_Handler,
		},
		{
			MethodName: "VerifyAdministratorPassword",
			Handler:    _AdministratorService_VerifyAdministratorPassword_Handler,
		},
		{
			MethodName: "AdministratorStatusChange",
			Handler:    _AdministratorService_AdministratorStatusChange_Handler,
		},
		{
			MethodName: "AdministratorLoginSuccess",
			Handler:    _AdministratorService_AdministratorLoginSuccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "administrator/v1/administrator.proto",
}
