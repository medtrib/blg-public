// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.1
// - protoc             v5.28.2
// source: administrator/v1/administrator.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAdministratorServiceAdministratorLoginSuccess = "/administrator.v1.AdministratorService/AdministratorLoginSuccess"
const OperationAdministratorServiceAdministratorStatusChange = "/administrator.v1.AdministratorService/AdministratorStatusChange"
const OperationAdministratorServiceCreateAdministrator = "/administrator.v1.AdministratorService/CreateAdministrator"
const OperationAdministratorServiceDeleteAdministrator = "/administrator.v1.AdministratorService/DeleteAdministrator"
const OperationAdministratorServiceGetAdministrator = "/administrator.v1.AdministratorService/GetAdministrator"
const OperationAdministratorServiceGetAdministratorList = "/administrator.v1.AdministratorService/GetAdministratorList"
const OperationAdministratorServiceRecoverAdministrator = "/administrator.v1.AdministratorService/RecoverAdministrator"
const OperationAdministratorServiceUpdateAdministrator = "/administrator.v1.AdministratorService/UpdateAdministrator"
const OperationAdministratorServiceVerifyAdministratorPassword = "/administrator.v1.AdministratorService/VerifyAdministratorPassword"

type AdministratorServiceHTTPServer interface {
	AdministratorLoginSuccess(context.Context, *AdministratorLoginSuccessReq) (*emptypb.Empty, error)
	// AdministratorStatusChange 更改管理员状态
	AdministratorStatusChange(context.Context, *AdministratorStatusChangeReq) (*emptypb.Empty, error)
	// CreateAdministrator 新增管理员
	CreateAdministrator(context.Context, *CreateAdministratorReq) (*Administrator, error)
	// DeleteAdministrator 删除管理员
	DeleteAdministrator(context.Context, *DeleteAdministratorReq) (*emptypb.Empty, error)
	// GetAdministrator 管理员详情
	GetAdministrator(context.Context, *GetAdministratorReq) (*Administrator, error)
	// GetAdministratorList 列表
	GetAdministratorList(context.Context, *GetAdministratorListReq) (*GetAdministratorListPageRes, error)
	// RecoverAdministrator 恢复管理员
	RecoverAdministrator(context.Context, *RecoverAdministratorReq) (*emptypb.Empty, error)
	// UpdateAdministrator 更新管理员
	UpdateAdministrator(context.Context, *UpdateAdministratorReq) (*emptypb.Empty, error)
	// VerifyAdministratorPassword 验证管理员密码
	VerifyAdministratorPassword(context.Context, *VerifyAdministratorPasswordReq) (*emptypb.Empty, error)
}

func RegisterAdministratorServiceHTTPServer(s *http.Server, srv AdministratorServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/administrators", _AdministratorService_GetAdministratorList0_HTTP_Handler(srv))
	r.POST("/administrator", _AdministratorService_CreateAdministrator0_HTTP_Handler(srv))
	r.PUT("/administrator", _AdministratorService_UpdateAdministrator0_HTTP_Handler(srv))
	r.GET("/administrator", _AdministratorService_GetAdministrator0_HTTP_Handler(srv))
	r.DELETE("/administrator", _AdministratorService_DeleteAdministrator0_HTTP_Handler(srv))
	r.PATCH("/administrator", _AdministratorService_RecoverAdministrator0_HTTP_Handler(srv))
	r.POST("/administrator/password/verify", _AdministratorService_VerifyAdministratorPassword0_HTTP_Handler(srv))
	r.PATCH("/administrator/status", _AdministratorService_AdministratorStatusChange0_HTTP_Handler(srv))
	r.PATCH("/administrator/login/success", _AdministratorService_AdministratorLoginSuccess0_HTTP_Handler(srv))
}

func _AdministratorService_GetAdministratorList0_HTTP_Handler(srv AdministratorServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAdministratorListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdministratorServiceGetAdministratorList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAdministratorList(ctx, req.(*GetAdministratorListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAdministratorListPageRes)
		return ctx.Result(200, reply)
	}
}

func _AdministratorService_CreateAdministrator0_HTTP_Handler(srv AdministratorServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAdministratorReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdministratorServiceCreateAdministrator)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAdministrator(ctx, req.(*CreateAdministratorReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Administrator)
		return ctx.Result(200, reply)
	}
}

func _AdministratorService_UpdateAdministrator0_HTTP_Handler(srv AdministratorServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAdministratorReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdministratorServiceUpdateAdministrator)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAdministrator(ctx, req.(*UpdateAdministratorReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _AdministratorService_GetAdministrator0_HTTP_Handler(srv AdministratorServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAdministratorReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdministratorServiceGetAdministrator)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAdministrator(ctx, req.(*GetAdministratorReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Administrator)
		return ctx.Result(200, reply)
	}
}

func _AdministratorService_DeleteAdministrator0_HTTP_Handler(srv AdministratorServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAdministratorReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdministratorServiceDeleteAdministrator)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAdministrator(ctx, req.(*DeleteAdministratorReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _AdministratorService_RecoverAdministrator0_HTTP_Handler(srv AdministratorServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RecoverAdministratorReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdministratorServiceRecoverAdministrator)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RecoverAdministrator(ctx, req.(*RecoverAdministratorReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _AdministratorService_VerifyAdministratorPassword0_HTTP_Handler(srv AdministratorServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VerifyAdministratorPasswordReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdministratorServiceVerifyAdministratorPassword)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.VerifyAdministratorPassword(ctx, req.(*VerifyAdministratorPasswordReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _AdministratorService_AdministratorStatusChange0_HTTP_Handler(srv AdministratorServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdministratorStatusChangeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdministratorServiceAdministratorStatusChange)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdministratorStatusChange(ctx, req.(*AdministratorStatusChangeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _AdministratorService_AdministratorLoginSuccess0_HTTP_Handler(srv AdministratorServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdministratorLoginSuccessReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdministratorServiceAdministratorLoginSuccess)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdministratorLoginSuccess(ctx, req.(*AdministratorLoginSuccessReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type AdministratorServiceHTTPClient interface {
	AdministratorLoginSuccess(ctx context.Context, req *AdministratorLoginSuccessReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	AdministratorStatusChange(ctx context.Context, req *AdministratorStatusChangeReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	CreateAdministrator(ctx context.Context, req *CreateAdministratorReq, opts ...http.CallOption) (rsp *Administrator, err error)
	DeleteAdministrator(ctx context.Context, req *DeleteAdministratorReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetAdministrator(ctx context.Context, req *GetAdministratorReq, opts ...http.CallOption) (rsp *Administrator, err error)
	GetAdministratorList(ctx context.Context, req *GetAdministratorListReq, opts ...http.CallOption) (rsp *GetAdministratorListPageRes, err error)
	RecoverAdministrator(ctx context.Context, req *RecoverAdministratorReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateAdministrator(ctx context.Context, req *UpdateAdministratorReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	VerifyAdministratorPassword(ctx context.Context, req *VerifyAdministratorPasswordReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type AdministratorServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewAdministratorServiceHTTPClient(client *http.Client) AdministratorServiceHTTPClient {
	return &AdministratorServiceHTTPClientImpl{client}
}

func (c *AdministratorServiceHTTPClientImpl) AdministratorLoginSuccess(ctx context.Context, in *AdministratorLoginSuccessReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/administrator/login/success"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdministratorServiceAdministratorLoginSuccess))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdministratorServiceHTTPClientImpl) AdministratorStatusChange(ctx context.Context, in *AdministratorStatusChangeReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/administrator/status"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdministratorServiceAdministratorStatusChange))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdministratorServiceHTTPClientImpl) CreateAdministrator(ctx context.Context, in *CreateAdministratorReq, opts ...http.CallOption) (*Administrator, error) {
	var out Administrator
	pattern := "/administrator"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdministratorServiceCreateAdministrator))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdministratorServiceHTTPClientImpl) DeleteAdministrator(ctx context.Context, in *DeleteAdministratorReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/administrator"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdministratorServiceDeleteAdministrator))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdministratorServiceHTTPClientImpl) GetAdministrator(ctx context.Context, in *GetAdministratorReq, opts ...http.CallOption) (*Administrator, error) {
	var out Administrator
	pattern := "/administrator"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdministratorServiceGetAdministrator))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdministratorServiceHTTPClientImpl) GetAdministratorList(ctx context.Context, in *GetAdministratorListReq, opts ...http.CallOption) (*GetAdministratorListPageRes, error) {
	var out GetAdministratorListPageRes
	pattern := "/administrators"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdministratorServiceGetAdministratorList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdministratorServiceHTTPClientImpl) RecoverAdministrator(ctx context.Context, in *RecoverAdministratorReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/administrator"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdministratorServiceRecoverAdministrator))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdministratorServiceHTTPClientImpl) UpdateAdministrator(ctx context.Context, in *UpdateAdministratorReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/administrator"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdministratorServiceUpdateAdministrator))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdministratorServiceHTTPClientImpl) VerifyAdministratorPassword(ctx context.Context, in *VerifyAdministratorPasswordReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/administrator/password/verify"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdministratorServiceVerifyAdministratorPassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
