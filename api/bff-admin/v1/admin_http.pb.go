// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.1
// - protoc             v5.28.2
// source: bff-admin/v1/admin.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAdminapproveAdministrator = "/admin.v1.Admin/approveAdministrator"
const OperationAdminCreateAdministrator = "/admin.v1.Admin/CreateAdministrator"
const OperationAdminCreateApi = "/admin.v1.Admin/CreateApi"
const OperationAdminCreateMenu = "/admin.v1.Admin/CreateMenu"
const OperationAdminCreateRole = "/admin.v1.Admin/CreateRole"
const OperationAdminDeleteAdministrator = "/admin.v1.Admin/DeleteAdministrator"
const OperationAdminDeleteApi = "/admin.v1.Admin/DeleteApi"
const OperationAdminDeleteMenu = "/admin.v1.Admin/DeleteMenu"
const OperationAdminDeleteRole = "/admin.v1.Admin/DeleteRole"
const OperationAdminDeleteRoleForUser = "/admin.v1.Admin/DeleteRoleForUser"
const OperationAdminDeleteRolesForUser = "/admin.v1.Admin/DeleteRolesForUser"
const OperationAdminforbidAdministrator = "/admin.v1.Admin/forbidAdministrator"
const OperationAdminGetAdministrator = "/admin.v1.Admin/GetAdministrator"
const OperationAdminGetAdministratorInfo = "/admin.v1.Admin/GetAdministratorInfo"
const OperationAdminGetAdministratorList = "/admin.v1.Admin/GetAdministratorList"
const OperationAdminGetApiAll = "/admin.v1.Admin/GetApiAll"
const OperationAdminGetApiList = "/admin.v1.Admin/GetApiList"
const OperationAdminGetApiLogList = "/admin.v1.Admin/GetApiLogList"
const OperationAdminGetMenuAll = "/admin.v1.Admin/GetMenuAll"
const OperationAdminGetMenuTree = "/admin.v1.Admin/GetMenuTree"
const OperationAdminGetOssStsToken = "/admin.v1.Admin/GetOssStsToken"
const OperationAdminGetPolicies = "/admin.v1.Admin/GetPolicies"
const OperationAdminGetRoleAll = "/admin.v1.Admin/GetRoleAll"
const OperationAdminGetRoleMenu = "/admin.v1.Admin/GetRoleMenu"
const OperationAdminGetRoleMenuBtn = "/admin.v1.Admin/GetRoleMenuBtn"
const OperationAdminGetRoleMenuTree = "/admin.v1.Admin/GetRoleMenuTree"
const OperationAdminGetRolesForUser = "/admin.v1.Admin/GetRolesForUser"
const OperationAdminGetUsersForRole = "/admin.v1.Admin/GetUsersForRole"
const OperationAdminLogin = "/admin.v1.Admin/Login"
const OperationAdminLoginOut = "/admin.v1.Admin/LoginOut"
const OperationAdminRecoverAdministrator = "/admin.v1.Admin/RecoverAdministrator"
const OperationAdminSetRoleMenu = "/admin.v1.Admin/SetRoleMenu"
const OperationAdminSetRoleMenuBtn = "/admin.v1.Admin/SetRoleMenuBtn"
const OperationAdminSetRolesForUser = "/admin.v1.Admin/SetRolesForUser"
const OperationAdminUpdateAdministrator = "/admin.v1.Admin/UpdateAdministrator"
const OperationAdminUpdateApi = "/admin.v1.Admin/UpdateApi"
const OperationAdminUpdateMenu = "/admin.v1.Admin/UpdateMenu"
const OperationAdminUpdatePolicies = "/admin.v1.Admin/UpdatePolicies"
const OperationAdminUpdateRole = "/admin.v1.Admin/UpdateRole"

type AdminHTTPServer interface {
	// ApproveAdministrator 管理员解禁
	ApproveAdministrator(context.Context, *IdReq) (*emptypb.Empty, error)
	// CreateAdministrator 管理员创建
	CreateAdministrator(context.Context, *CreateBffAdminReq) (*BffAdmin, error)
	// CreateApi 权限 —— Api创建
	CreateApi(context.Context, *CreateApiReq) (*Api, error)
	// CreateMenu 权限 —— Menu创建
	CreateMenu(context.Context, *CreateMenuReq) (*Menu, error)
	// CreateRole 权限 —— 角色创建
	CreateRole(context.Context, *CreateRoleReq) (*Role, error)
	// DeleteAdministrator 管理员删除
	DeleteAdministrator(context.Context, *IdReq) (*emptypb.Empty, error)
	// DeleteApi 权限 —— Api删除
	DeleteApi(context.Context, *IdReq) (*emptypb.Empty, error)
	// DeleteMenu 权限 —— Menu删除
	DeleteMenu(context.Context, *IdReq) (*emptypb.Empty, error)
	// DeleteRole 权限 —— 角色删除
	DeleteRole(context.Context, *IdReq) (*emptypb.Empty, error)
	// DeleteRoleForUser 权限 —— 删除用户某个角色
	DeleteRoleForUser(context.Context, *DeleteRoleForUserReq) (*emptypb.Empty, error)
	// DeleteRolesForUser 权限 —— 删除用户所有角色
	DeleteRolesForUser(context.Context, *DeleteRolesForUserReq) (*emptypb.Empty, error)
	// ForbidAdministrator 管理员禁用
	ForbidAdministrator(context.Context, *IdReq) (*emptypb.Empty, error)
	// GetAdministrator 管理员详情
	GetAdministrator(context.Context, *IdReq) (*BffAdmin, error)
	// GetAdministratorInfo 获取当前请求管理员信息
	GetAdministratorInfo(context.Context, *emptypb.Empty) (*BffAdmin, error)
	// GetAdministratorList 管理员列表
	GetAdministratorList(context.Context, *GetBffAdminListReq) (*GetBffAdminListPageRes, error)
	// GetApiAll 权限 —— 所有Api列表
	GetApiAll(context.Context, *emptypb.Empty) (*GetApiAllRes, error)
	// GetApiList 权限 —— Api列表
	GetApiList(context.Context, *GetApiListReq) (*GetApiListRes, error)
	// GetApiLogList-------------------------- 日志服务 ----------------------------------------//
	// 日志 —— 列表
	GetApiLogList(context.Context, *GetApiLogListReq) (*GetApiLogListRes, error)
	// GetMenuAll 权限 —— 所有Menu列表
	GetMenuAll(context.Context, *emptypb.Empty) (*GetMenuTreeRes, error)
	// GetMenuTree 权限 —— Menu列表
	GetMenuTree(context.Context, *emptypb.Empty) (*GetMenuTreeRes, error)
	// GetOssStsToken 文件 ——  OSS STSTOKEN 获取
	GetOssStsToken(context.Context, *emptypb.Empty) (*OssStsTokenResponse, error)
	// GetPolicies 策略授权规则 - 列表
	GetPolicies(context.Context, *RoleNameReq) (*GetPoliciesRes, error)
	// GetRoleAll-------------------------- 权限服务 ----------------------------------------//
	// 权限 —— 角色列表
	GetRoleAll(context.Context, *emptypb.Empty) (*GetRoleAllRes, error)
	// GetRoleMenu 权限 —— 角色菜单列表
	GetRoleMenu(context.Context, *RoleNameReq) (*GetMenuTreeRes, error)
	// GetRoleMenuBtn 权限 —— 获取角色菜单按钮列表
	GetRoleMenuBtn(context.Context, *GetRoleMenuBtnReq) (*GetRoleMenuBtnRes, error)
	// GetRoleMenuTree 权限 —— 角色菜单列表树
	GetRoleMenuTree(context.Context, *RoleNameReq) (*GetMenuTreeRes, error)
	// GetRolesForUser 权限 —— 获取用户角色列表
	GetRolesForUser(context.Context, *GetRolesForUserReq) (*GetRolesForUserRes, error)
	// GetUsersForRole 权限 —— 获取角色用户列表
	GetUsersForRole(context.Context, *RoleNameReq) (*GetUsersForRoleRes, error)
	// Login-------------------------- 管理员服务 ----------------------------------------//
	// 管理员登陆
	Login(context.Context, *LoginReq) (*LoginRes, error)
	// LoginOut 管理员退出
	LoginOut(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// RecoverAdministrator 管理员恢复
	RecoverAdministrator(context.Context, *IdReq) (*emptypb.Empty, error)
	// SetRoleMenu 权限 —— 角色菜单更新
	SetRoleMenu(context.Context, *SetRoleMenuReq) (*emptypb.Empty, error)
	// SetRoleMenuBtn 权限 —— 保存角色菜单按钮列表
	SetRoleMenuBtn(context.Context, *SetRoleMenuBtnReq) (*emptypb.Empty, error)
	// SetRolesForUser 权限 —— 设置用户角色关系
	SetRolesForUser(context.Context, *SetRolesForUserReq) (*emptypb.Empty, error)
	// UpdateAdministrator 管理员更新
	UpdateAdministrator(context.Context, *UpdateBffAdminReq) (*emptypb.Empty, error)
	// UpdateApi 权限 —— Api更新
	UpdateApi(context.Context, *UpdateApiReq) (*emptypb.Empty, error)
	// UpdateMenu 权限 —— Menu更新
	UpdateMenu(context.Context, *UpdateMenuReq) (*emptypb.Empty, error)
	// UpdatePolicies 权限 —— 策略授权规则 - 更新
	UpdatePolicies(context.Context, *UpdatePoliciesReq) (*emptypb.Empty, error)
	// UpdateRole 权限 —— 角色更新
	UpdateRole(context.Context, *UpdateRoleReq) (*emptypb.Empty, error)
}

func RegisterAdminHTTPServer(s *http.Server, srv AdminHTTPServer) {
	r := s.Route("/")
	r.POST("/bff-admin/v1/login", _Admin_Login0_HTTP_Handler(srv))
	r.POST("/bff-admin/v1/logout", _Admin_LoginOut0_HTTP_Handler(srv))
	r.GET("/bff-admin/v1/administrators", _Admin_GetAdministratorList1_HTTP_Handler(srv))
	r.GET("/bff-admin/v1/admin", _Admin_GetAdministrator1_HTTP_Handler(srv))
	r.GET("/bff-admin/v1/administratorInfo", _Admin_GetAdministratorInfo0_HTTP_Handler(srv))
	r.POST("/bff-admin/v1/admin", _Admin_CreateAdministrator1_HTTP_Handler(srv))
	r.PUT("/bff-admin/v1/admin", _Admin_UpdateAdministrator1_HTTP_Handler(srv))
	r.DELETE("/bff-admin/v1/admin", _Admin_DeleteAdministrator1_HTTP_Handler(srv))
	r.PATCH("/bff-admin/v1/admin", _Admin_RecoverAdministrator1_HTTP_Handler(srv))
	r.PATCH("/bff-admin/v1/admin/forbid", _Admin_ForbidAdministrator0_HTTP_Handler(srv))
	r.PATCH("/bff-admin/v1/admin/approve", _Admin_ApproveAdministrator0_HTTP_Handler(srv))
	r.GET("/bff-admin/v1/auth/roles", _Admin_GetRoleAll1_HTTP_Handler(srv))
	r.POST("/bff-admin/v1/auth/role", _Admin_CreateRole1_HTTP_Handler(srv))
	r.PUT("/bff-admin/v1/auth/role", _Admin_UpdateRole1_HTTP_Handler(srv))
	r.DELETE("/bff-admin/v1/auth/role", _Admin_DeleteRole1_HTTP_Handler(srv))
	r.POST("/bff-admin/v1/auth/setRolesForUser", _Admin_SetRolesForUser1_HTTP_Handler(srv))
	r.GET("/bff-admin/v1/auth/getRolesForUser", _Admin_GetRolesForUser1_HTTP_Handler(srv))
	r.GET("/bff-admin/v1/auth/getUsersForRole", _Admin_GetUsersForRole1_HTTP_Handler(srv))
	r.DELETE("/bff-admin/v1/auth/deleteRoleForUser", _Admin_DeleteRoleForUser1_HTTP_Handler(srv))
	r.DELETE("/bff-admin/v1/auth/deleteRolesForUser", _Admin_DeleteRolesForUser1_HTTP_Handler(srv))
	r.GET("/bff-admin/v1/auth/getPolicies", _Admin_GetPolicies1_HTTP_Handler(srv))
	r.POST("bff-admin/v1/auth/updatePolicies", _Admin_UpdatePolicies1_HTTP_Handler(srv))
	r.GET("/bff-admin/v1/auth/apiAll", _Admin_GetApiAll0_HTTP_Handler(srv))
	r.GET("/bff-admin/v1/auth/api", _Admin_GetApiList1_HTTP_Handler(srv))
	r.POST("bff-admin/v1/auth/api", _Admin_CreateApi1_HTTP_Handler(srv))
	r.PUT("bff-admin/v1/auth/api", _Admin_UpdateApi1_HTTP_Handler(srv))
	r.DELETE("/bff-admin/v1/auth/api", _Admin_DeleteApi1_HTTP_Handler(srv))
	r.GET("/bff-admin/v1/auth/menuAll", _Admin_GetMenuAll1_HTTP_Handler(srv))
	r.GET("/bff-admin/v1/auth/menuTree", _Admin_GetMenuTree1_HTTP_Handler(srv))
	r.POST("/bff-admin/v1/auth/menu", _Admin_CreateMenu1_HTTP_Handler(srv))
	r.PUT("/bff-admin/v1/auth/menu", _Admin_UpdateMenu1_HTTP_Handler(srv))
	r.DELETE("/bff-admin/v1/auth/menu", _Admin_DeleteMenu1_HTTP_Handler(srv))
	r.GET("/bff-admin/v1/auth/roleMenuTree", _Admin_GetRoleMenuTree1_HTTP_Handler(srv))
	r.GET("/bff-admin/v1/auth/roleMenu", _Admin_GetRoleMenu1_HTTP_Handler(srv))
	r.POST("/bff-admin/v1/auth/roleMenu", _Admin_SetRoleMenu0_HTTP_Handler(srv))
	r.GET("/bff-admin/v1/auth/roleMenuBtn", _Admin_GetRoleMenuBtn1_HTTP_Handler(srv))
	r.POST("/bff-admin/v1/auth/roleMenuBtn", _Admin_SetRoleMenuBtn0_HTTP_Handler(srv))
	r.GET("/bff-admin/v1/log/list", _Admin_GetApiLogList0_HTTP_Handler(srv))
	r.GET("/bff-admin/v1/oss/token", _Admin_GetOssStsToken0_HTTP_Handler(srv))
}

func _Admin_Login0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginRes)
		return ctx.Result(200, reply)
	}
}

func _Admin_LoginOut0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminLoginOut)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.LoginOut(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetAdministratorList1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBffAdminListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetAdministratorList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAdministratorList(ctx, req.(*GetBffAdminListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBffAdminListPageRes)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetAdministrator1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetAdministrator)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAdministrator(ctx, req.(*IdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BffAdmin)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetAdministratorInfo0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetAdministratorInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAdministratorInfo(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BffAdmin)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateAdministrator1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateBffAdminReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminCreateAdministrator)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAdministrator(ctx, req.(*CreateBffAdminReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BffAdmin)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateAdministrator1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBffAdminReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminUpdateAdministrator)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAdministrator(ctx, req.(*UpdateBffAdminReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteAdministrator1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminDeleteAdministrator)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAdministrator(ctx, req.(*IdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Admin_RecoverAdministrator1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IdReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminRecoverAdministrator)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RecoverAdministrator(ctx, req.(*IdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Admin_ForbidAdministrator0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IdReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminforbidAdministrator)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ForbidAdministrator(ctx, req.(*IdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Admin_ApproveAdministrator0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IdReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminapproveAdministrator)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ApproveAdministrator(ctx, req.(*IdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetRoleAll1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetRoleAll)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRoleAll(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRoleAllRes)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateRole1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRoleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminCreateRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRole(ctx, req.(*CreateRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Role)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateRole1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRoleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminUpdateRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRole(ctx, req.(*UpdateRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteRole1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminDeleteRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRole(ctx, req.(*IdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Admin_SetRolesForUser1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetRolesForUserReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminSetRolesForUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetRolesForUser(ctx, req.(*SetRolesForUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetRolesForUser1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRolesForUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetRolesForUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRolesForUser(ctx, req.(*GetRolesForUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRolesForUserRes)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetUsersForRole1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RoleNameReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetUsersForRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUsersForRole(ctx, req.(*RoleNameReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUsersForRoleRes)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteRoleForUser1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRoleForUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminDeleteRoleForUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRoleForUser(ctx, req.(*DeleteRoleForUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteRolesForUser1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRolesForUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminDeleteRolesForUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRolesForUser(ctx, req.(*DeleteRolesForUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetPolicies1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RoleNameReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetPolicies)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPolicies(ctx, req.(*RoleNameReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPoliciesRes)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdatePolicies1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdatePoliciesReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminUpdatePolicies)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePolicies(ctx, req.(*UpdatePoliciesReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetApiAll0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetApiAll)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetApiAll(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetApiAllRes)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetApiList1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetApiListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetApiList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetApiList(ctx, req.(*GetApiListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetApiListRes)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateApi1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateApiReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminCreateApi)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateApi(ctx, req.(*CreateApiReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Api)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateApi1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateApiReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminUpdateApi)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateApi(ctx, req.(*UpdateApiReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteApi1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminDeleteApi)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteApi(ctx, req.(*IdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetMenuAll1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetMenuAll)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMenuAll(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMenuTreeRes)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetMenuTree1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetMenuTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMenuTree(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMenuTreeRes)
		return ctx.Result(200, reply)
	}
}

func _Admin_CreateMenu1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateMenuReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminCreateMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateMenu(ctx, req.(*CreateMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Menu)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateMenu1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateMenuReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminUpdateMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMenu(ctx, req.(*UpdateMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteMenu1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminDeleteMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteMenu(ctx, req.(*IdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetRoleMenuTree1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RoleNameReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetRoleMenuTree)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRoleMenuTree(ctx, req.(*RoleNameReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMenuTreeRes)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetRoleMenu1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RoleNameReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetRoleMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRoleMenu(ctx, req.(*RoleNameReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMenuTreeRes)
		return ctx.Result(200, reply)
	}
}

func _Admin_SetRoleMenu0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetRoleMenuReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminSetRoleMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetRoleMenu(ctx, req.(*SetRoleMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetRoleMenuBtn1_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRoleMenuBtnReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetRoleMenuBtn)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRoleMenuBtn(ctx, req.(*GetRoleMenuBtnReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRoleMenuBtnRes)
		return ctx.Result(200, reply)
	}
}

func _Admin_SetRoleMenuBtn0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetRoleMenuBtnReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminSetRoleMenuBtn)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetRoleMenuBtn(ctx, req.(*SetRoleMenuBtnReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetApiLogList0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetApiLogListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetApiLogList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetApiLogList(ctx, req.(*GetApiLogListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetApiLogListRes)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetOssStsToken0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetOssStsToken)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOssStsToken(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OssStsTokenResponse)
		return ctx.Result(200, reply)
	}
}

type AdminHTTPClient interface {
	ApproveAdministrator(ctx context.Context, req *IdReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	CreateAdministrator(ctx context.Context, req *CreateBffAdminReq, opts ...http.CallOption) (rsp *BffAdmin, err error)
	CreateApi(ctx context.Context, req *CreateApiReq, opts ...http.CallOption) (rsp *Api, err error)
	CreateMenu(ctx context.Context, req *CreateMenuReq, opts ...http.CallOption) (rsp *Menu, err error)
	CreateRole(ctx context.Context, req *CreateRoleReq, opts ...http.CallOption) (rsp *Role, err error)
	DeleteAdministrator(ctx context.Context, req *IdReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteApi(ctx context.Context, req *IdReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteMenu(ctx context.Context, req *IdReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteRole(ctx context.Context, req *IdReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteRoleForUser(ctx context.Context, req *DeleteRoleForUserReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	DeleteRolesForUser(ctx context.Context, req *DeleteRolesForUserReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	ForbidAdministrator(ctx context.Context, req *IdReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetAdministrator(ctx context.Context, req *IdReq, opts ...http.CallOption) (rsp *BffAdmin, err error)
	GetAdministratorInfo(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *BffAdmin, err error)
	GetAdministratorList(ctx context.Context, req *GetBffAdminListReq, opts ...http.CallOption) (rsp *GetBffAdminListPageRes, err error)
	GetApiAll(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetApiAllRes, err error)
	GetApiList(ctx context.Context, req *GetApiListReq, opts ...http.CallOption) (rsp *GetApiListRes, err error)
	GetApiLogList(ctx context.Context, req *GetApiLogListReq, opts ...http.CallOption) (rsp *GetApiLogListRes, err error)
	GetMenuAll(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetMenuTreeRes, err error)
	GetMenuTree(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetMenuTreeRes, err error)
	GetOssStsToken(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *OssStsTokenResponse, err error)
	GetPolicies(ctx context.Context, req *RoleNameReq, opts ...http.CallOption) (rsp *GetPoliciesRes, err error)
	GetRoleAll(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetRoleAllRes, err error)
	GetRoleMenu(ctx context.Context, req *RoleNameReq, opts ...http.CallOption) (rsp *GetMenuTreeRes, err error)
	GetRoleMenuBtn(ctx context.Context, req *GetRoleMenuBtnReq, opts ...http.CallOption) (rsp *GetRoleMenuBtnRes, err error)
	GetRoleMenuTree(ctx context.Context, req *RoleNameReq, opts ...http.CallOption) (rsp *GetMenuTreeRes, err error)
	GetRolesForUser(ctx context.Context, req *GetRolesForUserReq, opts ...http.CallOption) (rsp *GetRolesForUserRes, err error)
	GetUsersForRole(ctx context.Context, req *RoleNameReq, opts ...http.CallOption) (rsp *GetUsersForRoleRes, err error)
	Login(ctx context.Context, req *LoginReq, opts ...http.CallOption) (rsp *LoginRes, err error)
	LoginOut(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	RecoverAdministrator(ctx context.Context, req *IdReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetRoleMenu(ctx context.Context, req *SetRoleMenuReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetRoleMenuBtn(ctx context.Context, req *SetRoleMenuBtnReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	SetRolesForUser(ctx context.Context, req *SetRolesForUserReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateAdministrator(ctx context.Context, req *UpdateBffAdminReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateApi(ctx context.Context, req *UpdateApiReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateMenu(ctx context.Context, req *UpdateMenuReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdatePolicies(ctx context.Context, req *UpdatePoliciesReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateRole(ctx context.Context, req *UpdateRoleReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type AdminHTTPClientImpl struct {
	cc *http.Client
}

func NewAdminHTTPClient(client *http.Client) AdminHTTPClient {
	return &AdminHTTPClientImpl{client}
}

func (c *AdminHTTPClientImpl) ApproveAdministrator(ctx context.Context, in *IdReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/bff-admin/v1/admin/approve"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminapproveAdministrator))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) CreateAdministrator(ctx context.Context, in *CreateBffAdminReq, opts ...http.CallOption) (*BffAdmin, error) {
	var out BffAdmin
	pattern := "/bff-admin/v1/admin"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminCreateAdministrator))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) CreateApi(ctx context.Context, in *CreateApiReq, opts ...http.CallOption) (*Api, error) {
	var out Api
	pattern := "bff-admin/v1/auth/api"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminCreateApi))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) CreateMenu(ctx context.Context, in *CreateMenuReq, opts ...http.CallOption) (*Menu, error) {
	var out Menu
	pattern := "/bff-admin/v1/auth/menu"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminCreateMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) CreateRole(ctx context.Context, in *CreateRoleReq, opts ...http.CallOption) (*Role, error) {
	var out Role
	pattern := "/bff-admin/v1/auth/role"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminCreateRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) DeleteAdministrator(ctx context.Context, in *IdReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/bff-admin/v1/admin"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminDeleteAdministrator))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) DeleteApi(ctx context.Context, in *IdReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/bff-admin/v1/auth/api"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminDeleteApi))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) DeleteMenu(ctx context.Context, in *IdReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/bff-admin/v1/auth/menu"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminDeleteMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) DeleteRole(ctx context.Context, in *IdReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/bff-admin/v1/auth/role"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminDeleteRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) DeleteRoleForUser(ctx context.Context, in *DeleteRoleForUserReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/bff-admin/v1/auth/deleteRoleForUser"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminDeleteRoleForUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) DeleteRolesForUser(ctx context.Context, in *DeleteRolesForUserReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/bff-admin/v1/auth/deleteRolesForUser"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminDeleteRolesForUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) ForbidAdministrator(ctx context.Context, in *IdReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/bff-admin/v1/admin/forbid"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminforbidAdministrator))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) GetAdministrator(ctx context.Context, in *IdReq, opts ...http.CallOption) (*BffAdmin, error) {
	var out BffAdmin
	pattern := "/bff-admin/v1/admin"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetAdministrator))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) GetAdministratorInfo(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*BffAdmin, error) {
	var out BffAdmin
	pattern := "/bff-admin/v1/administratorInfo"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetAdministratorInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) GetAdministratorList(ctx context.Context, in *GetBffAdminListReq, opts ...http.CallOption) (*GetBffAdminListPageRes, error) {
	var out GetBffAdminListPageRes
	pattern := "/bff-admin/v1/administrators"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetAdministratorList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) GetApiAll(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetApiAllRes, error) {
	var out GetApiAllRes
	pattern := "/bff-admin/v1/auth/apiAll"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetApiAll))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) GetApiList(ctx context.Context, in *GetApiListReq, opts ...http.CallOption) (*GetApiListRes, error) {
	var out GetApiListRes
	pattern := "/bff-admin/v1/auth/api"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetApiList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) GetApiLogList(ctx context.Context, in *GetApiLogListReq, opts ...http.CallOption) (*GetApiLogListRes, error) {
	var out GetApiLogListRes
	pattern := "/bff-admin/v1/log/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetApiLogList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) GetMenuAll(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetMenuTreeRes, error) {
	var out GetMenuTreeRes
	pattern := "/bff-admin/v1/auth/menuAll"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetMenuAll))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) GetMenuTree(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetMenuTreeRes, error) {
	var out GetMenuTreeRes
	pattern := "/bff-admin/v1/auth/menuTree"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetMenuTree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) GetOssStsToken(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*OssStsTokenResponse, error) {
	var out OssStsTokenResponse
	pattern := "/bff-admin/v1/oss/token"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetOssStsToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) GetPolicies(ctx context.Context, in *RoleNameReq, opts ...http.CallOption) (*GetPoliciesRes, error) {
	var out GetPoliciesRes
	pattern := "/bff-admin/v1/auth/getPolicies"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetPolicies))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) GetRoleAll(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetRoleAllRes, error) {
	var out GetRoleAllRes
	pattern := "/bff-admin/v1/auth/roles"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetRoleAll))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) GetRoleMenu(ctx context.Context, in *RoleNameReq, opts ...http.CallOption) (*GetMenuTreeRes, error) {
	var out GetMenuTreeRes
	pattern := "/bff-admin/v1/auth/roleMenu"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetRoleMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) GetRoleMenuBtn(ctx context.Context, in *GetRoleMenuBtnReq, opts ...http.CallOption) (*GetRoleMenuBtnRes, error) {
	var out GetRoleMenuBtnRes
	pattern := "/bff-admin/v1/auth/roleMenuBtn"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetRoleMenuBtn))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) GetRoleMenuTree(ctx context.Context, in *RoleNameReq, opts ...http.CallOption) (*GetMenuTreeRes, error) {
	var out GetMenuTreeRes
	pattern := "/bff-admin/v1/auth/roleMenuTree"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetRoleMenuTree))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) GetRolesForUser(ctx context.Context, in *GetRolesForUserReq, opts ...http.CallOption) (*GetRolesForUserRes, error) {
	var out GetRolesForUserRes
	pattern := "/bff-admin/v1/auth/getRolesForUser"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetRolesForUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) GetUsersForRole(ctx context.Context, in *RoleNameReq, opts ...http.CallOption) (*GetUsersForRoleRes, error) {
	var out GetUsersForRoleRes
	pattern := "/bff-admin/v1/auth/getUsersForRole"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetUsersForRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) Login(ctx context.Context, in *LoginReq, opts ...http.CallOption) (*LoginRes, error) {
	var out LoginRes
	pattern := "/bff-admin/v1/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) LoginOut(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/bff-admin/v1/logout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminLoginOut))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) RecoverAdministrator(ctx context.Context, in *IdReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/bff-admin/v1/admin"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminRecoverAdministrator))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) SetRoleMenu(ctx context.Context, in *SetRoleMenuReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/bff-admin/v1/auth/roleMenu"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminSetRoleMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) SetRoleMenuBtn(ctx context.Context, in *SetRoleMenuBtnReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/bff-admin/v1/auth/roleMenuBtn"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminSetRoleMenuBtn))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) SetRolesForUser(ctx context.Context, in *SetRolesForUserReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/bff-admin/v1/auth/setRolesForUser"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminSetRolesForUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) UpdateAdministrator(ctx context.Context, in *UpdateBffAdminReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/bff-admin/v1/admin"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminUpdateAdministrator))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) UpdateApi(ctx context.Context, in *UpdateApiReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "bff-admin/v1/auth/api"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminUpdateApi))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) UpdateMenu(ctx context.Context, in *UpdateMenuReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/bff-admin/v1/auth/menu"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminUpdateMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) UpdatePolicies(ctx context.Context, in *UpdatePoliciesReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "bff-admin/v1/auth/updatePolicies"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminUpdatePolicies))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AdminHTTPClientImpl) UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/bff-admin/v1/auth/role"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminUpdateRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
