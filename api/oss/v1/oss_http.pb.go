// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.1
// - protoc             v5.28.2
// source: oss/v1/oss.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationOSSGetOssStsToken = "/file.v1.OSS/GetOssStsToken"
const OperationOSSUploadFile = "/file.v1.OSS/UploadFile"

type OSSHTTPServer interface {
	// GetOssStsToken 获取ossToken
	GetOssStsToken(context.Context, *emptypb.Empty) (*OssStsTokenResponse, error)
	// UploadFile 文件上传
	UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error)
}

func RegisterOSSHTTPServer(s *http.Server, srv OSSHTTPServer) {
	r := s.Route("/")
	r.GET("/oss/sts/token", _OSS_GetOssStsToken0_HTTP_Handler(srv))
	r.POST("/file/upload", _OSS_UploadFile0_HTTP_Handler(srv))
}

func _OSS_GetOssStsToken0_HTTP_Handler(srv OSSHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOSSGetOssStsToken)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOssStsToken(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OssStsTokenResponse)
		return ctx.Result(200, reply)
	}
}

func _OSS_UploadFile0_HTTP_Handler(srv OSSHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UploadFileRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOSSUploadFile)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UploadFile(ctx, req.(*UploadFileRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UploadFileResponse)
		return ctx.Result(200, reply)
	}
}

type OSSHTTPClient interface {
	GetOssStsToken(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *OssStsTokenResponse, err error)
	UploadFile(ctx context.Context, req *UploadFileRequest, opts ...http.CallOption) (rsp *UploadFileResponse, err error)
}

type OSSHTTPClientImpl struct {
	cc *http.Client
}

func NewOSSHTTPClient(client *http.Client) OSSHTTPClient {
	return &OSSHTTPClientImpl{client}
}

func (c *OSSHTTPClientImpl) GetOssStsToken(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*OssStsTokenResponse, error) {
	var out OssStsTokenResponse
	pattern := "/oss/sts/token"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationOSSGetOssStsToken))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OSSHTTPClientImpl) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...http.CallOption) (*UploadFileResponse, error) {
	var out UploadFileResponse
	pattern := "/file/upload"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOSSUploadFile))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
