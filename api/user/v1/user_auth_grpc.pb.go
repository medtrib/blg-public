// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: user/v1/user_auth.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserAuth_UserReg_FullMethodName          = "/api.user.v1.UserAuth/UserReg"
	UserAuth_UserBingPhone_FullMethodName    = "/api.user.v1.UserAuth/UserBingPhone"
	UserAuth_UserMergeAccount_FullMethodName = "/api.user.v1.UserAuth/UserMergeAccount"
)

// UserAuthClient is the client API for UserAuth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 用户认证管理
type UserAuthClient interface {
	// 用户注册(登录)
	UserReg(ctx context.Context, in *UserRegRequest, opts ...grpc.CallOption) (*Reply, error)
	// 用户绑定手机号
	UserBingPhone(ctx context.Context, in *UserBingPhoneRequest, opts ...grpc.CallOption) (*Reply, error)
	// 账号合并功能
	UserMergeAccount(ctx context.Context, in *UserMergeAccountRequest, opts ...grpc.CallOption) (*Reply, error)
}

type userAuthClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAuthClient(cc grpc.ClientConnInterface) UserAuthClient {
	return &userAuthClient{cc}
}

func (c *userAuthClient) UserReg(ctx context.Context, in *UserRegRequest, opts ...grpc.CallOption) (*Reply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reply)
	err := c.cc.Invoke(ctx, UserAuth_UserReg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthClient) UserBingPhone(ctx context.Context, in *UserBingPhoneRequest, opts ...grpc.CallOption) (*Reply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reply)
	err := c.cc.Invoke(ctx, UserAuth_UserBingPhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAuthClient) UserMergeAccount(ctx context.Context, in *UserMergeAccountRequest, opts ...grpc.CallOption) (*Reply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Reply)
	err := c.cc.Invoke(ctx, UserAuth_UserMergeAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAuthServer is the server API for UserAuth service.
// All implementations must embed UnimplementedUserAuthServer
// for forward compatibility.
//
// 用户认证管理
type UserAuthServer interface {
	// 用户注册(登录)
	UserReg(context.Context, *UserRegRequest) (*Reply, error)
	// 用户绑定手机号
	UserBingPhone(context.Context, *UserBingPhoneRequest) (*Reply, error)
	// 账号合并功能
	UserMergeAccount(context.Context, *UserMergeAccountRequest) (*Reply, error)
	mustEmbedUnimplementedUserAuthServer()
}

// UnimplementedUserAuthServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserAuthServer struct{}

func (UnimplementedUserAuthServer) UserReg(context.Context, *UserRegRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserReg not implemented")
}
func (UnimplementedUserAuthServer) UserBingPhone(context.Context, *UserBingPhoneRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserBingPhone not implemented")
}
func (UnimplementedUserAuthServer) UserMergeAccount(context.Context, *UserMergeAccountRequest) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserMergeAccount not implemented")
}
func (UnimplementedUserAuthServer) mustEmbedUnimplementedUserAuthServer() {}
func (UnimplementedUserAuthServer) testEmbeddedByValue()                  {}

// UnsafeUserAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAuthServer will
// result in compilation errors.
type UnsafeUserAuthServer interface {
	mustEmbedUnimplementedUserAuthServer()
}

func RegisterUserAuthServer(s grpc.ServiceRegistrar, srv UserAuthServer) {
	// If the following call pancis, it indicates UnimplementedUserAuthServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserAuth_ServiceDesc, srv)
}

func _UserAuth_UserReg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).UserReg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuth_UserReg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).UserReg(ctx, req.(*UserRegRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuth_UserBingPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBingPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).UserBingPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuth_UserBingPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).UserBingPhone(ctx, req.(*UserBingPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAuth_UserMergeAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserMergeAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServer).UserMergeAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuth_UserMergeAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServer).UserMergeAccount(ctx, req.(*UserMergeAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAuth_ServiceDesc is the grpc.ServiceDesc for UserAuth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAuth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.user.v1.UserAuth",
	HandlerType: (*UserAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserReg",
			Handler:    _UserAuth_UserReg_Handler,
		},
		{
			MethodName: "UserBingPhone",
			Handler:    _UserAuth_UserBingPhone_Handler,
		},
		{
			MethodName: "UserMergeAccount",
			Handler:    _UserAuth_UserMergeAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user/v1/user_auth.proto",
}
