// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.1
// - protoc             v5.28.2
// source: user/v1/user_auth.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserAuthUserBingPhone = "/api.user.v1.UserAuth/UserBingPhone"
const OperationUserAuthUserMergeAccount = "/api.user.v1.UserAuth/UserMergeAccount"
const OperationUserAuthUserReg = "/api.user.v1.UserAuth/UserReg"

type UserAuthHTTPServer interface {
	// UserBingPhone 用户绑定手机号
	UserBingPhone(context.Context, *UserBingPhoneRequest) (*Reply, error)
	// UserMergeAccount 账号合并功能
	UserMergeAccount(context.Context, *UserMergeAccountRequest) (*Reply, error)
	// UserReg 用户注册(登录)
	UserReg(context.Context, *UserRegRequest) (*Reply, error)
}

func RegisterUserAuthHTTPServer(s *http.Server, srv UserAuthHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/user/reg", _UserAuth_UserReg0_HTTP_Handler(srv))
	r.POST("/v1/user/bindPhone", _UserAuth_UserBingPhone0_HTTP_Handler(srv))
	r.POST("/v1/user/userMergeAccountRequest", _UserAuth_UserMergeAccount0_HTTP_Handler(srv))
}

func _UserAuth_UserReg0_HTTP_Handler(srv UserAuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserRegRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserAuthUserReg)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserReg(ctx, req.(*UserRegRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Reply)
		return ctx.Result(200, reply)
	}
}

func _UserAuth_UserBingPhone0_HTTP_Handler(srv UserAuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserBingPhoneRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserAuthUserBingPhone)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserBingPhone(ctx, req.(*UserBingPhoneRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Reply)
		return ctx.Result(200, reply)
	}
}

func _UserAuth_UserMergeAccount0_HTTP_Handler(srv UserAuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserMergeAccountRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserAuthUserMergeAccount)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserMergeAccount(ctx, req.(*UserMergeAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Reply)
		return ctx.Result(200, reply)
	}
}

type UserAuthHTTPClient interface {
	UserBingPhone(ctx context.Context, req *UserBingPhoneRequest, opts ...http.CallOption) (rsp *Reply, err error)
	UserMergeAccount(ctx context.Context, req *UserMergeAccountRequest, opts ...http.CallOption) (rsp *Reply, err error)
	UserReg(ctx context.Context, req *UserRegRequest, opts ...http.CallOption) (rsp *Reply, err error)
}

type UserAuthHTTPClientImpl struct {
	cc *http.Client
}

func NewUserAuthHTTPClient(client *http.Client) UserAuthHTTPClient {
	return &UserAuthHTTPClientImpl{client}
}

func (c *UserAuthHTTPClientImpl) UserBingPhone(ctx context.Context, in *UserBingPhoneRequest, opts ...http.CallOption) (*Reply, error) {
	var out Reply
	pattern := "/v1/user/bindPhone"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserAuthUserBingPhone))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserAuthHTTPClientImpl) UserMergeAccount(ctx context.Context, in *UserMergeAccountRequest, opts ...http.CallOption) (*Reply, error) {
	var out Reply
	pattern := "/v1/user/userMergeAccountRequest"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserAuthUserMergeAccount))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserAuthHTTPClientImpl) UserReg(ctx context.Context, in *UserRegRequest, opts ...http.CallOption) (*Reply, error) {
	var out Reply
	pattern := "/v1/user/reg"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserAuthUserReg))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
